{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "Schema for the SimCenter backend applications.",
    "type": "object",
    "title": "App Schema",
    "properties": {
      "Inputs": {
        "configurationFile": {
          "title": "Configuration File",
          "description": "JSON file containing simulation details and specifies the application selected for each workflow step.",
          "properties": {
            "runDir": {"type": "path", "description": "Directory where input_data folder is located."},
            "localAppDir": {"type": "path", "description": "Directory where applications folder is located."},
            "units": {"type": "string", "description": "Dictionary of strings which specifiy units for force, length, and time.", "default": "N, m, sec"},
            "outputs": {"type": "bool", "description": "Indicator (True/False) of which workflow outputs (EDP, DM, DV) are provided in the simulation.", "default": "true"},
            "Applications": {"type": "dict", "description": "Dictionary of applications selected for each workflow step, with their associated application-specific inputs."},
          }
        },
        "buildingSourceFile": {
          "title": "Building Source File",
          "description": "CSV file containing building properties for the response simulation and damage/loss estimation steps of the workflow. The following headers must be included (with any one of the header options listed):",
          "properties": {
            "id": {"type": "int", "description": "ID number of the building."},
            "'Longitude', 'longitude', 'lon', 'Lon'": {"type": "float", "description": "Longitude coordinate of the building site."},
            "'Latitude', 'latitude', 'lat', 'Lat'": {"type": "float", "description": "Latitude coordinate of the building site."},
            "'Stories', 'stories'": {"type": "int", "description": "Number of stories in the building."},
            "'Year Built', 'yearbuilt', 'yearBuilt'": {"type": "int", "description": "Year that the building was built."},
            "'Structure Type', 'structure', 'structureType'": {"type": "string", "description": "Structural type of the building."},
            "'Type ID', 'occupancy', 'occupancyType'": {"type": "string", "description": "HAZUS occupancy class of the building."},
            "'Area', 'areafootprint', 'areaFootprint', 'area'": {"type": "float", "description": "Floor plan/footprint area of the building."},
            "'Replacement Cost', 'replacementCost'": {"type": "float", "description": "Cost of replacement of the building. If provided as '1.0', then the DL assessment will return an estimate losses as a percentage of the total replacement cost."},
            "model_params": {"type": "float", "description": "(Optional) Columns for additional structural parameters used in the build_model function for creating a structural analysis model of the building."},
          }
        },
        "modelFile": {
          "title": "Model File",
          "description": "If the simulation application chosen is OpenSees-Simulation or OpenSeesPy-Simulation, then a model file must be provided. It consists of an OpenSees/OpenSeesPy script with functions for building and analyzing a custom structural model. See the Simulation Applications page for more details on application-specific inputs."
        },
        "EDPspecs": {
          "title": "EDP specifications file",
          "description": "JSON file specifying types, locations, and directions of EDPs to record in the structural model during response simulation.The EDP specifications file is only necessary as an input if UserDefinedEDP is chosen as the EDP application."
        },
        "eventFiles": {
          "title": "Event Files",
          "description": "To specify the type, location, and intensity of each event, the following files must be provided in the input_data/records folder.",
          "properties": {
            "EventGrid": {
              "description": "CSV file which specifies the coordinate (latitude/longitude) location of each event site.",
              "properties": {
                "sta": {"type": "string", "description": "Name of event file associated with the given event site. If running time history analysis, then the name of the site file is provided instead." },
                "lon": {"type": "float", "description": "Longitude coordinate of the site location." },
                "lat": {"type": "float", "description": "Latitude coordinate of the site location." }
              }
            },
            "Event IM Files": {
              "description": "CSV or JSON files containing information on the intensity measure of the event.",
              "properties": {
                "name": {"type": "string", "description": "Name of ground motion record."},
                "dT": {"type": "float", "description": "Time step of ground motion recording."},
                "data_x": {"type": "list", "description": "List of acceleration points in the x-direction ground motion record."},
                "data_y": {"type": "list", "description": "List of acceleration points in the y-direction ground motion record."},
                "PGA_x": {"type": "float", "description": "Value of peak ground acceleration in the x-direction ground motion record."},
                "PGA_y": {"type": "float", "description": "Value of peak ground acceleration in the y-direction ground motion record."},
              }
            },
            "Site Files": {
              "description": "CSV files listing the names of the event file(s) assigned to the site for time history analysis. This file can also provide other properties, such as a ground motion scale factor.",
              "properties": {
                "GM_file": {"type": "string", "description": "Name of the ground motion event file (for Earthquake hazard events)."},
                "factor": {"type": "float", "description": "Factor for scaling the ground motion."}
              }
            }
          }
        }
      },
      "Outputs": {
        "outputEDP": {
          "title": "EDP Output File",
          "description": "File which aggregates reponse simulation results from the EDP.json files of all building assets. When run locally, the workflow returns the output in the form of a CSV file. When run remotely (on DesignSafe), the workflow returns the output in the form of a HDF file.",
          "properties": {
            "type": {"type": "string", "description": "Name of EDP type."},
            "loc": {"type": "int", "description": "Location of where EDP is recorded on the model. If UserDefinedEDP is specified as the EDP application, then the location labelling is denoted in the EDP specification file. Otherwise, the numbering starts at 0, which denotes the ground level."},
            "dir": {"type": "int", "description": "Direction of the EDP is recorded. The numbering used is X=1, Y=2, Z=3 (if OpenSeesPyInput is specified as the Modeling application, then the numbering convention is independent of the dofMap)."},
            "stat": {"type": "string", "description": "Describes the statistic reported for each EDP. EDPs are assumed to follow a lognormal distribution described by a median parameter and beta (lognormal standard deviation) parameter. If 'samples' is set to 1 in the RegionalMapping application, then only one event is assigned to each building asset and only one statistic (median) is returned in the EDP Output File."}
          }
        },
        "outputDM": {
          "title": "DM Output File",
          "description": "File which aggregates damage state estimates from the DM.json files of all building assets. When run locally, the workflow returns the output in the form of a CSV file. When run remotely (on DesignSafe), the workflow returns the output in the form of a HDF file.",
          "properties": {
            "Collapse probability": {"type": "float", "description": "Probability of collapse for each building asset, represented as a value between 0 and 1."},
            "DS likelihood": {"type": "float", "description": "The probability of each damage state for every building asset, provided as a value between 0 and 1. Probabilities are reported for five damage states: '0' indicates no damage; '1_1' indicates DS1 (aesthetic damage), '2_1' indicates DS2 (mild damage), '3_1' indicates DS3 (moderate damage), and '4_1' indicates DS4 (severe damage). The DS likelihoods are additionally reported by component group, where the following abbreviations are used: 'S' = structural components, 'NS' = all nonstructural components, 'NSA' = acceleration-sensitive nonstructural components, 'NSD' = drift-sensitive nonstructural components. The probabilities of the five damage states for each component type (across the row) should sum to 1 (total probability for the building asset)."}
          }
        },
        "outputDV": {
          "title": "DV Output File",
          "description": "File which aggregates decision variable estimates from the DV.json files of all building assets. When run locally, the workflow returns the output in the form of a CSV file. When run remotely (on DesignSafe), the workflow returns the output in the form of a HDF file.",
          "properties": {
            "Aggregate Repair Cost": {"type": "float", "description": "Repair cost for the entire building asset, reported with the statistics: mean, standard deviation, 10th percentile, median (50th percentile), and 90th percentile. The currency unit for the repair cost is the same as that of the the replacementCost property provided in the building input file. If replacementCost is set equal to 1, then the repair costs in the DV Output File are reported as a percentage of the replacement cost."},
            "Repair Impractical": {"type": "float", "description": "Probability of repair being impractical for the building asset, provided as a value between 0 and 1."},
            "Component Repair Cost": {"type": "float", "description": "Mean repair cost for the building asset reported by component group ('S' = structural components, 'NS' = all nonstructural components, 'NSA' = acceleration-sensitive nonstructural components, 'NSD' = drift-sensitive nonstructural components) and damage state ('aggregate' = total for the component group, '1_1' = DS1, '2_1' = DS2, '3_1' = DS3, '4_1' = DS4)."},
            "Aggregate Repair Time": {"type": "float", "description": "Repair time for the entire building asset, reported with the statistics: mean, standard deviation, 10th percentile, median (50th percentile), and 90th percentile. Time is reported in units of ___."},
            "Aggregate Injuries": {"type": "float", "description": "Number of injuries projected as a result of damage to the building asset, reported with the statistics: mean, standard deviation, 10th percentile, median (50th percentile), and 90th percentile. Injuries are provided at four severity levels."}
          }
        }
      },
      "BuildingApplications": {
        "CSV_to_BIM": {
          "title": "CSV_to_BIM",
          "description": "Parses building source information from CSV and saves into BIM.json files for each building.",
          "properties": {
            "File Path": "applications/createBIM/CSV_to_BIM/CSV_to_BIM.py",
            "Inputs": {
              "properties":{
                "Min": {"type": "int", "description": "Min id of building to run in workflow.", "default": 1, "location": "configuration file"},
                "Max": {"type": "int", "description": "Max id of building to run in workflow.", "default": 10, "location": "configuration file"},
                "Building source file": {"type": "path", "description": "Path to buildings database file.", "default": "input_data/"}
              }
            },
            "Outputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information. For each building ID, the application creates a separate BIM file.", "default": "#-BIM.json"}
              }
            }
          }
        }
      },
      "EventApplications": {
        "SimCenterEvent": {
          "title": "SimCenterEvent",
          "description": "Python file creating EVENT.json file containing on event intensity measure from individual event files. Supports all hazard event types (Earthquake, Wind, Hurricane).",
          "properties": {
            "File Path": "applications/createEVENT/SimCenterEvent.py",
            "Inputs": {
              "properties": {
                "Event files": {"type": "string", "description": "Event intensity measure saved in separate JSON files.", "default": "input_data/records/"},
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"}
              }
            },
            "Outputs": {
              "properties": {
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"}
              }
            }
          }
        },
        "ExistingPEER_Events": {
          "title": "ExistingPEER_Events",
          "description": "Application file creating EVENT.json file containing on event intensity measure from individual event files. Supports all hazard event types (Earthquake, Wind, Hurricane).",
          "properties": {
            "File Path": "applications/createEVENT/multiplePEER/MultiplePEER",
            "Inputs": {
              "properties": {
                "Event files": {"type": "string", "description": "Event intensity measure saved in separate JSON files.", "default": "input_data/records/"},
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"}
              }
            },
            "Outputs": {
              "properties": {
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"}
              }
            }
          }
        },
        "StochasticWindWittigSinha": {
          "title": "StochasticWindWittigSinha",
          "description": "Application file creating EVENT.json files for stochastic wind fields based on the Witting-Sinha method. Supports Wind hazard events.",
          "properties": {
            "File Path": "applications/createEVENT/stochasticWind/StochasticWind",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"}
              }
            },
            "Outputs": {
              "properties": {
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"}
              }
            }
          }
        },
        "StochasticGroundMotion": {
          "title": "StochasticGroundMotion",
          "description": "Application file for creating EVENT.json files for stochastic ground motion events based on the ___ GMPE. Supports Earthquake hazard events.",
          "properties": {
            "File Path": "applications/createEVENT/stochasticGroundMotion/StochasticGM",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"}
              }
            },
            "Outputs": {
              "properties": {
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"}
              }
            }
          }
        }
      },
      "ModelingApplications": {
        "MDOF-LU": {
          "title": "MDOF-LU",
          "description": "Creates SAM.json file and generates script for creating a hysteretic multi-degree of freedom (MDOF) system subject to earthquake time history analysis, based on the Lu method. Analysis is executed by the OpenSeesSimulation application.",
          "properties": {
            "File Path": "applications/createSAM/MDOF-LU/MDOF-LU",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "HAZUS data": {"type": "path", "description": "Defines location of the HAZUS building configuration file.", "default": "input_data/"},
                "stdStiffness": {"type": "float", "description": "Defines the standard deviation that should be considered when sampling the stiffness for the building.", "default": "CHECK"},
                "stdDamping": {"type": "float", "description": "Defines the standard deviation that should be considered when sampling the damping ratio for the building.", "default": "CHECK"}
              }
            },
            "Outputs": {
              "properties": {
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"}
              }
            }
          }
        },
        "OpenSeesInput": {
          "title": "OpenSeesInput",
          "description": "Creates SAM.json file containing model information for an input OpenSees structural model. Analysis is executed in the OpenSeesSimulation application.",
          "properties": {
            "File Path": "applications/createSAM/openSeesInput/OpenSeesInput",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"}
              }
            },
            "Outputs": {
              "properties": {
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"}
              }
            }
          }
        },
        "OpenSeesPyInput": {
          "title": "OpenSeesPyInput",
          "description": "Creates SAM.json file containing model information for an input OpenSeesPy structural model. The functions 'build_model' and 'run_analysis' must be defined in the model script. Analysis is executed in the OpenSeesPySimulation application.",
          "properties": {
            "File Path": "applications/createSAM/openSeesPyInput/OpenSeesPyInput.py",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "modelPath": {"type": "path", "description": "Defines the location of the input OpenSeesPy model files.", "default": "input_data/model/"},
                "mainScript": {"type": "string", "description": "Defines the name of the main model file which contains the build_model and run_analysis functions."},
                "ndm": {"type": "string", "description": "Defines the number of degrees of freedom in the numerical model.", "default": 6},
                "dofMap": {"type": "int", "description": "By default, the workflow assumes X=1, Y=2, Z=3 mapping between directions and degrees of freedom, with XY being the horizontal directions. This input allows you to define an alternative mapping by providing three numbers separated by commas in a string, such as '1, 3, 2' if you wish to have Y as the vertical direction.", "default": "1,2,3"},
                "ctrlNodes": {"type": "string", "description": "Defines the IDs of nodes in the OpenSeesPy model where EDPs are recorded. If the number of ctrlNodes provided exceeds the number of stories, only the firsts n+1 nodes will be used for an n-story building."}
              }
            },
            "Outputs": {
              "properties": {
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"}
              }
            }
          }
        }
      },
      "EDPApplications": {
        "StandardEarthquakeEDP_R": {
          "title": "StandardEarthquakeEDP_R",
          "description": "Creates EDP.json file containing standard EDPs for earthquake hazard events, including peak interstory drift ratio (PID), peak floor acceleration (PFA), peak roof drift (PRD), and peak floor displacement (PFD).",
          "properties": {
            "File Path": "applications/createEDP/standardEarthquakeEDP_R/StandardEarthquakeEDP",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"}
              }
            },
            "Outputs": {
              "properties": {
                "EDP file": {"type": "string", "description": "File containing type, location, and direction of EDPs expected from the response simulation.", "default": "EDP.json"}
              }
            }
          }
        },
        "UserDefinedEDP_R": {
          "title": "UserDefinedEDP_R",
          "description": "Creates EDP.json file containing EDP information which is custom-defined in an input EDP specifications file.",
          "properties": {
            "File Path": "applications/createEDP/userEDP_R/UserDefinedEDP.py",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"},
                "EDP specifications file": {"type": "string", "description": "JSON file containing a nested dictionary of custom-defined EDPs. The dictionary should be structured with: a 'location' sub-dictionary with custom column-line ('cline') IDs as the keys, followed by lists of node tags for nodes along the cline; and a 'EDP_types' sub-dictionary with EDPs as the keys, followed by dictionaries of the cline IDs and their DOFs of interest. See the example file below.", "default": "EDP_specs.json"}
              }
            },
            "Outputs": {
              "properties": {
                "EDP file": {"type": "string", "description": "File containing type, location, and direction of EDPs expected from the response simulation.", "default": "EDP.json"}
              }
            }
          }
        }
      },
      "SimulationApplications": {
        "OpenSees-Simulation_R": {
          "title": "OpenSees-Simulation_R",
          "description": "Executes script for building structural model in OpenSees and running analysis for the response simulation, then saves the results in EDP.json.",
          "properties": {
            "File Path": "applications/performSIMULATION/openSees_R/OpenSeesSimulation.py",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"},
                "EDP file": {"type": "string", "description": "File containing type, location, and direction of EDPs expected from the response simulation.", "default": "EDP.json"},
                "model file": {"type": "Tcl script", "description": "Tcl file with scripts for building the model and running analysis on OpenSees. The name and path to the model file is specified in the BIM file."}
              }
            },
            "Outputs": {
              "properties": {
                "EDP file": {"type": "string", "description": "File updated with EDPs recorded from the response simuluation, organized by type, location, and direction.", "default": "EDP.json"},
                "SIM file": {"type": "string", "description": "File containing constants, settings, and methods for the response simulation. This file is deleted after the application is executed.", "default": "SIM.json"}
              }
            }
          }
        },
        "OpenSeesPy-Simulation": {
          "title": "OpenSees-Simulation_R",
          "description": "Executes script for building structural model in OpenSeesPy and running analysis for the response simulation, then saves the results in EDP.json.",
          "properties": {
            "File Path": "applications/performSIMULATION/openSeesPy/OpenSeesPySimulation.py",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"},
                "EDP file": {"type": "string", "description": "File containing type, location, and direction of EDPs expected from the response simulation.", "default": "EDP.json"},
                "model file": {"type": "Python script", "description": "Python file defining functions a) 'build_model(model_params)', where 'model_params' from the building source file are parsed for building the OpenSeesPy structural model; and b) 'run_analysis', which takes as input the event time step (dT), number of steps in the event (npts), list with time series of event points in two horizontal directions (TS_List), and the list of nodes at which EDPs are recorded (recorderNodes). The name and path to the model file is specified in the BIM file."}
              }
            },
            "Outputs": {
              "properties": {
                "EDP file": {"type": "string", "description": "File updated with EDPs recorded from the response simuluation, organized by type, location, and direction.", "default": "EDP.json"},
                "SIM file": {"type": "string", "description": "File containing constants, settings, and methods for the response simulation. This file is deleted after the application is executed.", "default": "SIM.json"}
              }
            }
          }
        },
        "IMasEDP": {
          "title": "IMasEDP",
          "description": "Returns the input event IM as the EDP in the absence of a response simulation method. This application is appropriate to use when damages and losses are estimated as function of IM in the DL assessment.",
          "properties": {
            "File Path": "applications/performSIMULATION/IMasEDP/IMasEDP.py",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "SAM file": {"type": "string", "description": "File used as a placeholder in the absence of response simulation.", "default": "SAM.json"},
                "EDP file": {"type": "string", "description": "File expecting to use IMs from the EVENT file as the EDP types.", "default": "EDP.json"}
              }
            },
            "Outputs": {
              "properties": {
                "EDP file": {"type": "string", "description": "File containing event IMs in place of the EDP.", "default": "EDP.json"},
                "SIM file": {"type": "string", "description": "File used as a placeholder in the absence of response simulation. This file is deleted after the application is executed.", "default": "SIM.json"}
              }
            }
          }
        }
      },
      "UQApplications": {
        "Dakota-UQ": {
          "title": "Dakota-UQ",
          "description": "Uses the uncertainty quantification package Dakota to sample random variables and execute the workflow driver file.",
          "properties": {
            "File Path": "applications/performUQ/dakota_R/DakotaFEM.py",
            "Inputs": {
              "properties": {
                "BIM file": {"type": "string", "description": "File containing a dictionary of building information.", "default": "#-BIM.json"},
                "EVENT file": {"type": "string", "description": "File containing event intensity measure for each simulation per building.", "default": "EVENT.json"},
                "SAM file": {"type": "string", "description": "File containing model information for response simulation.", "default": "SAM.json"},
                "EDP file": {"type": "string", "description": "File containing type, location, and direction of recorded EDPs from the response simulation.", "default": "EDP.json"},
                "SIM file": {"type": "string", "description": "File containing constants, settings, and methods for the response simulation. This file is deleted after the application is executed.", "default": "SIM.json"},
                "driver file": {"type": "string", "description": "Batch file containing commands for Dakota to execute, located in the working directory for each simulation.", "default": "workflow_driver.bat"},
                "method": {"type": "string", "description": "Defines the UQ sampling method to use.", "default": "LHS"},
                "samples": {"type": "int", "description": "Specifies the number of realizations to generate. For surrogate models, these samples are used to train the model.", "default": "None"},
                "seed": {"type": "int", "description": "Specifies the random seed for sampling.", "default": "randrange(1,1000)"},
                "samples2": {"type": "int", "description": "Only for surrogate models. Specifies the number of realizations to generate from the trained model.", "default": "None"},
                "seed2": {"type": "int", "description": "Only for surrogate models. Specifies the random seed to generate samples from the models.", "default": "None"},
                "ismethod": {"type": "string", "description": "Specifies the importance sampling method to use", "default": "None"},
                "dataMethod": {"type": "string", "description": "...", "default": "None"},
                "dataMethod2": {"type": "string", "description": "...", "default": "None"},
                "type": {"type": "string", "description": "...", "default": "None"},
                "concurrency": {"type": "int", "description": "Specifies the number of processes to use for simulation.", "default": "None"},
                "keepSamples": {"type": "bool", "description": "True if the intermediate results shall be kept (not deleted) for each sample.", "default": "True"},
                "runType": {"type": "string", "description": "..."}
              }
            },
            "Outputs": {
              "properties": {
                "EDP file": {"type": "string", "description": "Name of EDP file to be added to.", "default": "EDP.json"}
              }
            }
          }
        }
      },
      "DLApplications": {
        "pelicun": {
          "title": "pelicun",
          "description": "Performs damage and loss (DL) assessment using the pelicun Python package. The application uses built-in fragility functions and the replacement cost defined in the building source file to determine damage state and loss likelihoods.",
          "properties": {
            "File Path": "applications/performDL/pelicun/DL_calculation.py",
            "Inputs": {
              "properties": {
                "DL file": {"type": "string", "description": "File containing the DL model information. The default is to source it from the building source file.", "default": "#-BIM.json"},
                "EDP file": {"type": "string", "description": "File containing type, location, and direction of recorded EDPs from the response simulation.", "default": "EDP.json"},
                "DL_Method": {"type": "string", "description": "Defines the damage and loss assessment method. Available choices include 'FEMA P58', 'HAZUS MH EQ', 'HAZUS MH', 'HAZUS MH EQ IM', and 'HAZUS MH HU'.", "default": "None"},
                "Realizations": {"type": "int", "description": "Specifies the number of loss realizations to generate.", "default": "None"},
                "detailed_results": {"type": "bool", "description": "If False, only the main results are saved to improve efficiency.", "default": "True"},
                "detailed_results": {"type": "bool", "description": "If False, only the main results are saved to improve efficiency.", "default": "True"},
                "log_file": {"type": "bool", "description": "If False, pelicun does not create a run log file.", "default": "True"},
                "coupled_EDP": {"type": "bool", "description": "If True, the raw EDPs are used as-is without resampling.", "default": "False"},
                "event_time": {"type": "string", "description": "Defines the time of the event in YYYY-MM-DD:HH format. 'off' turns all time-effects off.", "default": "None"},
                "ground_failure": {"type": "bool", "description": "If True, fragility groups associated with ground failure are added in the auto-population phase. Note that such analysis requires PGD values as inputs.", "default": "False"},
                "auto_script": {"type": "string", "description": "...", "default": "None"}
              }
            },
            "Outputs": {
              "properties": {
                "output EDP": {"type": "string", "description": "File which stores EDP statistics (median and log standard deviation) from response simulation for the building asset.", "default": "EDP.csv"},
                "output DM": {"type": "string", "description": "File which stores damage measures (damage state probability) for the building asset.", "default": "DM.csv"},
                "output DV": {"type": "string", "description": "File which stores decision variables (loss estimates) for the building asset.", "default": "DV.csv"}
              }
            }
          }
        }
      },
      "RegionalMapApplications": {
        "NNE": {
          "title": "Nearest Neighbor Events (NNE)",
          "description": "Assigns events to building site by sampling from nearest neighboring event sites, using coordinate locations. The user specifies the number of sampled events and the number of neighbors to sample events from.",
          "properties": {
            "File Path": "applications/performRegionalEventSimulation/NearestNeighborEvents/NNE.py",
            "Inputs": {
              "properties": {
                "eventGrid": {"type": "path", "description": "path to file containing location information on each event file", "default": "input_data/records/"},
                "samples": {"type": "int", "description": "number of event samples to assign to each building", "default": 1, "location": "configuration file"},
                "neighbors": {"type": "int", "description": "number of neighboring event sites to sample from", "default": 1, "location": "configuration file"}
              }
            },
            "Outputs": {
              "properties": {
                "buildingFile": {"type": "string", "description": "file containing a dictionary of building information, with event information added.", "default": "#-BIM.json"}
              }
            }
          }
        },
        "required": [
          "uqEngine",
          "uqType"
        ],
        "options": [
          "samplingMethodData",
          "reliabilityMethodData",
          "bayesianCalibrationMethodData",
          "calibrationMethodData"
        ]
      },
      "fem": {
        "type": "object",
        "description": "Inputs for the FEM tab.",
        "title": "FEM tab",
        "properties": {
          "dir": {
            "type": "string"
          },
          "inputFile": {
            "type": "string",
            "title":"Input File"
          },
          "mainInput": {
            "type": "string"
          },
          "mainPostprocessScript": {
            "type": "string",
            "description": "Path to post-processing script."
          },
          "numInputs": {
            "type": "integer"
          },
          "parametersFile": {
            "type": "string"
          },
          "parametersScript": {
            "type": "string"
          },
          "postprocessScript": {
            "type": "string"
          },
          "program": {
            "type": "string"
          }
        },
        "required": [
          "dir",
          "inputFile",
          "mainInput",
          "mainPostprocessScript",
          "numInputs",
          "parametersFile",
          "parametersScript",
          "postprocessScript",
          "program"
        ]
      },
      "localAppDir": {
        "type": "string",
        "description": "[incomplete]"
      },
      "python":  {"type": "string"},
      "randomVariables": {
        "type": "array",
        "title": "RV tab",
        "items": {
          "type": "object",
          "properties": {
            "distribution":  {"type": "string" },
            "name":          {"type": "string" },
            "refCount":      {"type": "integer"},
            "stdDev":        {"type": "number" },
            "value":         {"type": "string" },
            "variableClass": {"type": "string" }
          },
          "required": [
            "distribution",
            "name",
            "refCount",
            "value",
            "variableClass"
          ]
        }
      },
      "remoteAppDir":  {"type": "string"},
      "uqResults":     {"type": "object", "properties":{}},
      "workingDir":    {"type": "string"}
    },
    "required": [
      "Applications",
      "EDP",
      "UQ_Method",
      "fem",
      "localAppDir",
      "python",
      "randomVariables",
      "remoteAppDir",
      "uqResults",
      "workingDir"
    ]
  }
